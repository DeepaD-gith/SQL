--1. Display the number of states present in the LocationTable.
Select Count(Distinct State) as 'State'
from Location;

--2. How many products are of regular type? 
Select Count(Product) as 'RegularCount' 
from Product
where Type = 'Regular';

--3. How much spending has been done on marketing of product ID 1? 
Select ProductId, Sum(Marketing) as 'Marketing_Expense'
from Fact
group by ProductId
having Productid = 1; 

--4. What is the minimum sales of a product?
Select f.ProductId, P.Product, Min(f.Sales) as 'MinSales'
from Fact f
Join Product P on P.ProductId = f.ProductId
Group by f.ProductId,P.Product;

--5. Display the max Cost of Good Sold (COGS). 
Select Max(CoGS) as 'MaxCoGS' 
from Fact;

--6. Display the details of the product where product type is coffee. 
Select * 
from product
where Product_Type= 'Coffee';

--7. Display the details where total expenses are greater than 40. 
Select f.*
from fact f
where f.[Total Expenses] > 40;

--8. What is the average sales in area code 719? 
Select f.[Area Code],L.Market,  Avg(Sales) 'AvgSales719' 
from fact f
join Location L on L.Area_Code = f.[Area Code] 
and  f.[Area Code]=719
group by f.[Area Code],L.Market

--9. Find out the total profit generated by Colorado state.
Select L.State, Sum(profit) as 'TotalProfit'
from fact f 
join Location L on L.Area_Code = f.[Area Code]
and L.State = 'Colorado'
group by L.State;

--10. Display the average inventory for each product ID. 
Select ProductId, Avg(Inventory) as 'Avg Inventory'
from Fact
group by ProductId;

--11. Display state in a sequential order in a Location Table. 
Select Distinct State
from Location
Order by State 

--12. Display the average budget of the Product where the average budget margin should be greater than 100. 
Select P.Product, Avg(f.[Budget Margin]) 'AvgBudgetMargin'
from Fact f
Join Product P on P.ProductId = f.ProductId
group by P.Product
having Avg(f.[Budget Margin]) > 100

--13. What is the total sales done on date 2010-01-01? 
Select Sum(Sales)
from fact 
where Date = '2010-01-01';

--14. Display the average total expense of each product ID on an individual date. 
Select Date, ProductId, Sum([Total Expenses]) as 'Sum_TotalExpense'
from fact f 
group by Date, productId
Order by Date, ProductId


--15. Display the table with the following attributes such as date, productID, product_type, 
--product, sales, profit, state, area_code. 
Select f.date,f.productId,P.Product_Type,P.Product,Sales,L.State,L.Area_Code
from fact f 
join Location L on L.Area_Code = f.[Area Code]
join Product P on P.ProductId = f.ProductId

--16. Display the rank without any gap to show the sales wise rank. 
Select f.Sales, 
	  dense_rank() over(Order by Sales desc)
from fact f

--17. Find the state wise profit and sales.
Select L.State,
	   Sum(f.Profit) 'Total_Profit', 
	   Sum(f.Sales)'Total_Sales'
from fact f 
join Location L on L.Area_Code = f.[Area Code]
group by L.State
Order by L.State

--18. Find the state wise profit and sales along with the productname. 
Select L.State,P.Product, 
	   Sum(f.Profit) 'Total_Profit', 
	   Sum(f.Sales)'Total_Sales'
from fact f 
join Location L on L.Area_Code = f.[Area Code]
join Product P on P.ProductId = f.ProductId
group by L.State
Order by L.State

--19. If there is an increase in sales of 5%, calculate the increasedsales.
Select Sales, 
		(Sales*1.05) as 'Increased Sale' 
from fact


--20. Find the maximum profit along with the product ID and producttype. 
Select f.ProductId,
	   p.Product_Type,
	   Profit       
from fact f 
join Product P on P.ProductId = f.ProductId
where Profit = (Select Max(Profit) from fact)
group by f.ProductId, p.Product_Type
Order by f.ProductId;

--21. Create a stored procedure to fetch the result according to the product type from Product Table. 
CREATE Procedure get_Product_by_ProductType(@ProductType varchar(20))
AS
Begin
	Select P.*
	from Product P 
	where P.Product_Type = @ProductType
END

declare @l_ProductType varchar(20) = 'Coffee'
Exec get_Product_by_ProductType @l_ProductType


--22. Write a query by creating a condition in which if the total expenses is less than 60 
--then it is a profit or else loss. 
Select f.[Total Expenses],
       iif(f.[Total Expenses] < 60, 'Profit', 'Loss')	   
from fact f

--23. Give the total weekly sales value with the date and product ID details. 
--    Use roll-up to pull the data in hierarchical order. 
Select date,productid, sum(sales) 
from fact
group by date, productid with rollup

--24. Apply union and intersection operator on the tables which consist of attribute area code. 
Select f.[Area Code] from fact f
union
Select Area_Code from Location

Select f.[Area Code] from fact f
Intersect
Select Area_Code from Location

--25. Create a user-defined function for the product table to fetch a particular product type 
--based upon the user’s preference. 
create function get_producttable(@producttype varchar(20))
Returns Table
As
Return
Select * from Product where Product_Type = @producttype

Select * from dbo.get_producttable('Coffee')

--26. Change the product type from coffee to tea where product ID is 1 and undo it.
Begin Tran
	Update Product set Product_Type = 'Tea'
	where ProductId = 1
RollBack

--27. Display the date, product ID and sales where total expenses are between 100 to 200. 
Select date,ProductId,Sales, [Total Expenses]
from fact
where [Total Expenses] between 100 and 200;

--28. Delete the records in the Product Table for regular type. 
Delete from Product where Type ='Regular'

--29. Display the ASCII value of the fifth character from the columnProduct.
Select Product, 
	   Ascii(Substring(Product,5,1)) 'Ascii_of_5thChar'
from Product